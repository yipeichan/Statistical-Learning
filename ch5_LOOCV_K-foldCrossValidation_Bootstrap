install.packages('ISLR')
library('ISLR')
require(boot)
?cv.glm
plot(mpg~horsepower,data=Auto)

## LOOCV, leave one out cross validation
glm.fit=glm(mpg~horsepower, data=Auto)
cv.glm(Auto,glm.fit)$delta #pretty slow (doesnt use formula (5.2) on page 180)

##Lets write a simple function to use formula (5.2)
loocv=function(fit){
  h=lm.influence(fit)$h
  mean((residuals(fit)/(1-h))^2)
}

## Now we try it out
loocv(glm.fit)
cv.error=rep(0,5)
degree=1:5
for(d in degree){
  glm.fit=glm(mpg~poly(horsepower,d), data=Auto)
  cv.error[d]=loocv(glm.fit)
}
plot(degree,cv.error,type="b")

## 10-fold CV

cv.error10=rep(0,5)
for(d in degree){
  glm.fit=glm(mpg~poly(horsepower,d), data=Auto)
  cv.error10[d]=cv.glm(Auto,glm.fit,K=10)$delta[1]
}
lines(degree,cv.error10,type="b",col="red")


## Bootstrap
## Minimum risk investment - Section 5.2

alpha=function(x,y){
  vx=var(x)
  vy=var(y)
  cxy=cov(x,y)
  (vy-cxy)/(vx+vy-2*cxy)
}
alpha(Portfolio$X,Portfolio$Y)

## What is the standard error of alpha?

alpha.fn=function(data, index){
  with(data[index,],alpha(X,Y))
}

dim(Portfolio)
alpha.fn(Portfolio,1:100)

set.seed(1)
alpha.fn (Portfolio,sample(1:100,100,replace=TRUE))

boot.out=boot(Portfolio,alpha.fn,R=1000)
boot.out
plot(boot.out)



###############
#Q1 Download the file 5.R.RData and load it into R using load("5.R.RData"). Consider the linear regression model of y on X1 and X2. What is the standard error for ??_1?
#Ans. 0.02593
load("/Users/yi-peichan/Desktop/statistical learning_???/5.R.RData")
attach(Xy)
fit <- lm(y ~ ., data = Xy)
summary(fit)


#Q2 Next, plot the data using matplot(Xy,type="l"). Which of the following do you think is most likely given what you see?
# Ans There is very strong autocorrelation between consecutive rows of the data matrix. 
# Roughly speaking, we have about 10-20 repeats of every data point, so the sample size is in effect much smaller than the number of rows (1000 in this case).
matplot(Xy,type="l")

#Q3 Now, use the (standard) bootstrap to estimate s.e.(Beta_1). To within 10%, what do you get?
#Ans 0.02753709
set.seed(1)
dim(Xy)
error.fn=function(data, index){
  with(data[index,],coef(lm(y ~ X1+X2)))
}
error.fn(Xy,1:1000)
error.fn (Xy,sample(1:1000,1000,replace=TRUE))
boot.out=boot(Xy,error.fn,R=1000)
boot.out
plot(boot.out)

#Q4 Finally, use the block bootstrap to estimate s.e.(Beta_1). Use blocks of 
# 100 contiguous observations, and resample ten whole blocks with replacement
# then paste them together to construct each bootstrap time series. 
#To within 10%, what do you get?
# ANS 0.18562784
tsboot(Xy, boot.fn.ts, R = 1000, sim = "fixed", l = 100)


